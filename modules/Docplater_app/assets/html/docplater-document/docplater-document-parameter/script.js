// Generated by LiveScript 1.4.0
/**
 * @package   Docplater app
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   AGPL-3.0, see license.txt
 */
(function(){
  cs.Docplater.Redux.behavior.then(function(reduxBehavior){
    Polymer({
      is: 'docplater-document-parameter',
      behaviors: [cs.Docplater.behaviors.document_clause, reduxBehavior],
      hostAttributes: {
        contenteditable: 'false',
        tabindex: 0
      },
      properties: {
        display_value: String,
        exists: {
          type: Boolean,
          value: false
        },
        highlight: {
          reflectToAttribute: true,
          type: Boolean
        },
        name: String,
        parameter: {
          computed: '_parameter(state.document, clause, name)',
          type: Object
        },
        preview: {
          statePath: 'preview',
          type: Boolean
        },
        state: {
          statePath: '',
          type: Object
        }
      },
      listeners: {
        'focus': '_focus_in',
        'blur': '_focus_out'
      },
      attached: function(){
        this.name = this.textContent.trim();
      },
      _parameter: function(document_state, clause, name){
        var clauses, i$, len$, parameter, effective_value, upstream_parameter, display_value, highlight;
        if (this.clause) {
          clauses = document_state.clauses;
          for (i$ = 0, len$ = clauses.length; i$ < len$; ++i$) {
            clause = clauses[i$];
            if (clause.hash === this.clause.hash) {
              parameter = clause.instances[this.clause.instance][name];
              break;
            }
          }
        } else {
          parameter = document_state.parameters[name];
        }
        this.exists = Boolean(parameter);
        if (!parameter) {
          return;
        }
        this.non_existing = '';
        effective_value = parameter.value || parameter.default_value;
        upstream_parameter = this._get_upstream_parameter(effective_value);
        if (upstream_parameter) {
          display_value = upstream_parameter.value || upstream_parameter.default_value || "@" + upstream_name;
          highlight = upstream_parameter.highlight || parameter.highlight || false;
        } else {
          display_value = effective_value || "@" + name;
          highlight = parameter.highlight || false;
        }
        this.highlight = highlight;
        return parameter.merge({
          display_value: display_value
        });
      },
      _get_upstream_parameter: function(value){
        var name;
        if (value.indexOf('@') !== 0) {
          return null;
        } else {
          name = value.substring(1);
          return this.getState().document.parameters[name] || null;
        }
      },
      _focus_in: function(){
        if (!this.exists) {
          return;
        }
        this.dispatch({
          type: 'PARAMETER_HIGHLIGHT',
          name: this.name,
          clause_hash: this.clause && this.clause.hash,
          clause_instance: this.clause && this.clause.instance
        });
      },
      _focus_out: function(){
        this.dispatch({
          type: 'PARAMETER_UNHIGHLIGHT'
        });
      }
    });
  });
}).call(this);
