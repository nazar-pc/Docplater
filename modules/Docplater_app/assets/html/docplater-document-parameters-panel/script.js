// Generated by LiveScript 1.4.0
/**
 * @package   Docplater app
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   AGPL-3.0, see license.txt
 */
(function(){
  cs.Docplater.Redux.behavior.then(function(reduxBehavior){
    Polymer({
      is: 'docplater-document-parameters-panel',
      behaviors: [reduxBehavior],
      properties: {
        parameters_map: Array,
        state: {
          statePath: '',
          type: Object
        }
      },
      observers: ['_parameters_map(state.document, state.clauses)'],
      _parameters_map: function(document, clauses){
        var parameters_map, name, parameter, clause_hash, this$ = this;
        if (this._skip_render) {
          this._skip_render = false;
          return;
        }
        parameters_map = [{
          'for': 'Document',
          parameters: (function(){
            var ref$, own$ = {}.hasOwnProperty, results$ = [];
            for (name in ref$ = document.parameters) if (own$.call(ref$, name)) {
              parameter = ref$[name];
              results$.push(parameter.merge({
                name: name
              }));
            }
            return results$;
          }())
        }];
        Promise.all((function(){
          var ref$, own$ = {}.hasOwnProperty, results$ = [];
          for (clause_hash in ref$ = document.clauses) if (own$.call(ref$, clause_hash)) {
            results$.push(cs.Docplater.functions.get_clause(clause_hash));
          }
          return results$;
        }())).then(function(clauses){
          var i$, len$, clause, clause_instances, clause_index, clause_instance, name, parameter, own$ = {}.hasOwnProperty;
          for (i$ = 0, len$ = clauses.length; i$ < len$; ++i$) {
            clause = clauses[i$];
            clause_instances = document.clauses[clause.hash];
            for (clause_index in clause_instances) if (own$.call(clause_instances, clause_index)) {
              clause_instance = clause_instances[clause_index];
              if (Object.keys(clause_instance.parameters).length) {
                parameters_map.push({
                  'for': clause.title + ' #' + clause_index,
                  parameters: (fn$())
                });
              }
            }
          }
          this$.parameters_map = parameters_map;
          function fn$(){
            var ref$, own$ = {}.hasOwnProperty, results$ = [];
            for (name in ref$ = clause_instance.parameters) if (own$.call(ref$, name)) {
              parameter = ref$[name];
              results$.push(parameter.merge({
                name: name,
                clause_hash: clause_hash,
                clause_index: clause_index
              }));
            }
            return results$;
          }
        });
      },
      _parameter_highlight: function(e){
        this.dispatch({
          type: 'PARAMETER_HIGHLIGHT',
          name: e.model.parameter.name,
          clause_hash: e.model.parameter.clause_hash,
          clause_index: e.model.parameter.clause_index
        });
      },
      _parameter_unhighlight: function(){
        this.dispatch({
          type: 'PARAMETER_UNHIGHLIGHT'
        });
      },
      _parameter_changed: function(e){
        this._skip_render = true;
        this.dispatch({
          type: 'PARAMETER_UPDATE_VALUE',
          name: e.model.parameter.name,
          clause_hash: e.model.parameter.clause_hash,
          clause_index: e.model.parameter.clause_index,
          value: e.target.value
        });
      },
      _delete_parameter: function(e){
        var parameter, this$ = this;
        parameter = e.model.parameter.name;
        cs.ui.confirm("Are you sure you want to delete parameter @" + parameter + "?").then(function(){
          this$.dispatch({
            type: 'PARAMETER_DELETE',
            name: parameter
          });
        });
      }
    });
  });
}).call(this);
