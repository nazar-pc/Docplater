// Generated by LiveScript 1.4.0
/**
 * @package   Docplater app
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   AGPL-3.0, see license.txt
 */
(function(){
  cs.Docplater.Redux.behavior.then(function(reduxBehavior){
    Polymer({
      is: 'docplater-document-parameters-panel',
      behaviors: [reduxBehavior],
      properties: {
        parameters_map: Array,
        state: {
          statePath: '',
          type: Object
        }
      },
      observers: ['_parameters_map(state.document, state.clauses)'],
      _parameters_map: function(document, clauses){
        var parameters_map, name, parameter, clause_hash, clause, this$ = this;
        if (this._skip_render) {
          this._skip_render = false;
          return;
        }
        parameters_map = [{
          'for': 'Document',
          parameters: (function(){
            var ref$, own$ = {}.hasOwnProperty, results$ = [];
            for (name in ref$ = document.parameters) if (own$.call(ref$, name)) {
              parameter = ref$[name];
              results$.push(parameter.merge({
                name: name
              }));
            }
            return results$;
          }())
        }];
        Promise.all((function(){
          var ref$, own$ = {}.hasOwnProperty, results$ = [];
          for (clause_hash in ref$ = document.clauses) if (own$.call(ref$, clause_hash)) {
            clause = ref$[clause_hash];
            results$.push(clauses[clause_hash] || cs.api("get api/Docplater_app/clauses/" + clause_hash));
          }
          return results$;
        }())).then(function(clauses){
          var i$, len$, clause, parameters, name, parameter;
          for (i$ = 0, len$ = clauses.length; i$ < len$; ++i$) {
            clause = clauses[i$];
            parameters = document.clauses[clause.hash].parameters;
            if (Object.keys(parameters).length) {
              parameters_map.push({
                'for': clause.title,
                parameters: (fn$())
              });
            }
          }
          this$.parameters_map = parameters_map;
          function fn$(){
            var ref$, own$ = {}.hasOwnProperty, results$ = [];
            for (name in ref$ = parameters) if (own$.call(ref$, name)) {
              parameter = ref$[name];
              results$.push(parameter.merge({
                clause_hash: clause_hash,
                name: name
              }));
            }
            return results$;
          }
        });
      },
      _parameter_highlight: function(e){
        this.dispatch({
          type: 'PARAMETER_HIGHLIGHT',
          name: e.model.parameter.name,
          clause_hash: e.model.parameter.clause_hash
        });
      },
      _parameter_unhighlight: function(){
        this.dispatch({
          type: 'PARAMETER_UNHIGHLIGHT'
        });
      },
      _parameter_changed: function(e){
        this._skip_render = true;
        this.dispatch({
          type: 'PARAMETER_UPDATE_VALUE',
          name: e.model.parameter.name,
          clause_hash: e.model.parameter.clause_hash,
          value: e.target.value
        });
      }
    });
  });
}).call(this);
