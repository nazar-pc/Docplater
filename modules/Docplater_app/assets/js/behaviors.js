// Generated by LiveScript 1.4.0
/**
 * @package   Docplater app
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   AGPL-3.0, see license.txt
 */
(function(){
  /**
   * @param {Element}	element
   * @param {string}	selector
   *
   * @return {(Element|null)}
   */
  var x$, ref$;
  function find_parent(element, selector){
    while (element) {
      element = element.parentNode || element.host;
      if (element instanceof Element && element.matches(selector)) {
        return element;
      }
    }
    return null;
  }
  x$ = (ref$ = cs.Docplater || (cs.Docplater = {})).behaviors || (ref$.behaviors = {});
  x$.document = {
    properties: {
      document: Object
    },
    attached: function(){
      this.set('document', find_parent(this, 'docplater-document'));
    }
  };
  x$.document_clause = {
    properties: {
      clause: Object
    },
    attached: function(){
      this.set('clause', find_parent(this, 'docplater-document-clause'));
    }
  };
  x$.parameters = {
    properties: {
      parameters: {
        notify: true,
        type: Array
      }
    },
    observers: ['_parameter_changed(parameters.*)'],
    get_parameter: function(name){
      var i$, ref$, len$, parameter;
      for (i$ = 0, len$ = (ref$ = this.parameters).length; i$ < len$; ++i$) {
        parameter = ref$[i$];
        if (parameter.name === name) {
          return parameter;
        }
      }
      return null;
    },
    _parameter_changed: function(){
      var i$, ref$, len$, parameter;
      for (i$ = 0, len$ = (ref$ = this.parameters).length; i$ < len$; ++i$) {
        parameter = ref$[i$];
        this._update_parameter(parameter);
      }
    },
    _update_parameter: function(parameter){
      var value, this$ = this;
      if (!this.document) {
        parameter.absolute_id = this.hash + '/' + parameter.name;
        parameter.real_value = this._parameter_get_real_value(parameter);
      } else {
        parameter = this.get_parameter(parameter.name);
        value = parameter.value || parameter.default_value;
        this.document.when_ready.then(function(){
          var name;
          if (parameter && value && value.indexOf('@') === 0) {
            name = value.substring(1);
            parameter.absolute_id = this$.document.hash + '/' + name;
            parameter.real_value = this$._parameter_get_real_value(this$.document.get_parameter(name));
          } else {
            parameter.absolute_id = this$.document.hash + '/' + this$.hash + '/' + parameter.name;
            parameter.real_value = this$._parameter_get_real_value(parameter);
          }
        });
      }
    },
    _parameter_get_real_value: function(parameter){
      if (parameter.value.length) {
        return parameter.value;
      } else {
        return parameter.default_value;
      }
    }
  };
  x$['this'] = {
    properties: {
      'this': {
        notify: true,
        readOnly: true,
        type: Object
      }
    },
    attached: function(){
      if (!this['this']) {
        this._setThis(this);
      }
    }
  };
  x$.when_ready = {
    created: function(){
      var this$ = this;
      this.when_ready = new Promise(function(_when_ready_resolve){
        this$._when_ready_resolve = _when_ready_resolve;
      });
    },
    attached: function(){
      if (this._when_ready_resolve) {
        this._when_ready_resolve(this);
        delete this._when_ready_resolve;
      }
    }
  };
}).call(this);
