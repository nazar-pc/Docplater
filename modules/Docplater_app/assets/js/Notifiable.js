// Generated by LiveScript 1.4.0
/**
 * @package   Docplater app
 * @category  modules
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2016, Nazar Mokrynskyi
 * @license   AGPL-3.0, see license.txt
 */
(function(){
  /**
   * @param {Notifiable}	args
   * @param {string}		key
   */
  var x$;
  function Wrap(target, key){
    var current_value;
    current_value = target[key];
    Object.defineProperty(target, key, {
      get: function(){
        return current_value;
      },
      set: function(new_value){
        var old_value;
        if (new_value instanceof Object) {
          new_value = new Notifiable(new_value, target, key);
        }
        old_value = current_value;
        current_value = new_value;
        return target.fire([key], new_value, old_value);
      },
      enumerable: true
    });
  }
  /**
   * @param {Object}	source
   * @param {Object}	parent
   * @param {string}	parent_key
   *
   * @return {Notifiable}
   */
  function Notifiable(source, parent, parent_key){
    var key, own$ = {}.hasOwnProperty, this$ = this;
    if (!(this instanceof Notifiable)) {
      return new Notifiable(source);
    }
    for (key in source) if (own$.call(source, key)) {
      if (source[key] instanceof Object) {
        this[key] = new Notifiable(source[key], this, key);
      } else {
        this[key] = source[key];
      }
      Wrap(this, key);
    }
    if (parent && parent_key) {
      this.on(function(keys, new_value, old_value){
        parent.fire([parent_key].concat(keys), new_value, old_value);
      });
    }
  }
  /**
   * @param {Array} keys
   *
   * @return {string}
   */
  function __notifiable_path_from_keys(keys){
    if (keys.length) {
      return '/' + keys.join('/') + '/';
    } else {
      return '/';
    }
  }
  x$ = Notifiable.prototype;
  x$.on = function(callback, keys){
    var path;
    keys == null && (keys = []);
    if (callback) {
      path = __notifiable_path_from_keys(keys);
      if (!this.__notifiable_callbacks) {
        Object.defineProperty(this, '__notifiable_callbacks', {
          value: []
        });
      }
      this.__notifiable_callbacks.push([callback, path]);
    }
    return this;
  };
  x$.off = function(callback, keys){
    var path;
    keys == null && (keys = []);
    path = __notifiable_path_from_keys(keys);
    this.__notifiable_callbacks = this.__notifiable_callbacks.filter(function(c){
      return c[0] !== callback && c[1] === path;
    });
    return this;
  };
  x$.once = function(callback, keys){
    var callback_, this$ = this;
    keys == null && (keys = []);
    if (callback) {
      callback_ = function(){
        this$.off(callback_);
        return callback.apply(callback, arguments);
      };
      this.on(callback_, keys);
    }
    return this;
  };
  x$.fire = function(keys, new_value, old_value){
    var ref$, path, i$, ref1$, len$, callback;
    if ((ref$ = this.__notifiable_callbacks) != null && ref$.length) {
      path = __notifiable_path_from_keys(keys);
      for (i$ = 0, len$ = (ref1$ = this.__notifiable_callbacks).length; i$ < len$; ++i$) {
        callback = ref1$[i$];
        if (path.indexOf(callback[1]) === 0) {
          callback[0](keys.slice(), new_value, old_value);
        }
      }
    }
  };
  x$.set = function(key, value){
    if (value instanceof Object) {
      this[key] = new Notifiable(value, this, key);
    } else {
      this[key] = value;
    }
    Wrap(this, key);
    return this;
  };
  (cs.Docplater || (cs.Docplater = {})).Notifiable = Notifiable;
}).call(this);
